<?php

namespace App\Http\Controllers;

use App\Models\bookaction;
use App\Models\booklist;
use App\Models\borrowpage;
use App\Models\copies;
use App\Models\StudentAccount;
use App\Models\UserStaff;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;


class BooklistController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $books = booklist::where('ishide', false)->paginate(50);
        return view('booklist', compact('books'));
    }

    public function updateback($id)
    {
        $book = booklist::find($id);
        $book->ishide = false;
        $book->save();
        return response()->json([
            'message' => 'Book updated successfully'
        ]);
    }


    public function updateremove($id)
    {
        $book = booklist::find($id);
        bookaction::create([
            'bookid' => $book->id,
            'action' => "remove the book",
            'performby' => Auth::user()->name
        ]);
        $book->ishide = true;
        $book->save();
        return response()->json([
            'message' => 'Book updated successfully'
        ]);
    }

    public function getnumber($id)
    {
        $data = copies::where('bookid', $id)->where('action', 'lessen')->sum('copies');
        $fine = borrowpage::where('bookid', $id)->where('bookstatus', 'fine')->count();
        $minis = $data + $fine;
        $onlend = borrowpage::where('bookid', $id)->where('bookstatus', 'onlend')->count();
        $subtotal =  copies::where('bookid', $id)->where('action', 'added')->sum('copies') + $onlend;
        $total = $subtotal - $minis;
        return $total;
    }
    public function store(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'title' => 'required',
                // 'author' => 'required',
                // 'department' => 'required',
                // 'copyright' => 'date_format:Y',
                // 'accession' => 'required',
                'copies' => 'required|numeric|min:0',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 400,
                    'errors' => $validator->messages()
                ]);
            }

            $book = booklist::create([
                'title' => $request->title,
                'author' => $request->author,
                'department' => $request->department,
                'copyright' => $request->copyright,
                'accession' => $request->accession,
                'callnumber'  => $request->callnumber,
                'subject' => $request->subject,
            ]);
            copies::create([
                'bookid' => $book->id,
                'action' => "added",
                'copies' => $request->copies
            ]);

            bookaction::create([
                'bookid' => $book->id,
                'action' => "added",
                'performby' => Auth::user()->name
            ]);

            return response()->json([
                'status' => 200,
                'message' => 'Book Added Successfully.'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => $e->getMessage()
            ]);
        }
    }


    public function test(Request $request)
    {
        // Retrieve the input values from the request
        $title = $request->input('title');
        $author = $request->input('author');
        $department = $request->input('department');
        $copyright = $request->input('copyright');
        $accession = $request->input('accession');
        $copies = $request->input('copies');
        $callnumber = $request->input('callnumber');
        $subject = $request->input('subject');
        // Create a new instance of the BookList model
        $book = new BookList(); // Assuming your model name is "BookList"
        $copy = new Copies(); // Assuming your model name is "Copies"

        // Set the values of the model attributes
        $book->title = $title;
        $book->author = $author;
        $book->department = $department;
        $book->copyright = $copyright;
        $book->accession = $accession;
        $book->callnumber = $callnumber;
        $book->subject = $subject;
        // Save the book to the database
        $book->save();

        // Get the book ID generated by the database
        $bookId = $book->id;

        // Create a new copy record and associate it with the book
        $copy->bookid = $bookId;
        $copy->action = 'added';
        $copy->copies = $copies;
        $copy->imported_at = Carbon::now(); // Add the current timestamp

        // Save the copy to the database
        $copy->save();

        // Simulate the loading process for demonstration purposes
        $totalData = 100; // Total number of data to import
        $progressInterval = 10; // Interval to update progress (in number of records)
        $progress = 0; // Initialize progress counter

        for ($i = 0; $i < $totalData; $i++) {
            // Import data logic here

            // Update progress after every $progressInterval records
            if (($i + 1) % $progressInterval === 0) {
                $progress = ($i + 1) * 100 / $totalData;
                // Store the progress in a cache, session, or database if required
            }
        }

        // Return a response indicating success
        return response()->json(['message' => 'Data inserted successfully', 'progress' => $progress]);
    }

    public function updatebooks(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'title' => 'required',

            ]);
            if ($validator->fails()) {
                return response()->json([
                    'status' => 400,
                    'errors' => $validator->messages()
                ]);
            }
            $book = booklist::find($request->id);
            $book->update([
                'title' => $request->title,
                'author' => $request->author,
                'department' => $request->department,
                'copyright' => $request->copyright,
                'accession' => $request->accession,
                'subject' => $request->subject,
                'callnumber' => $request->callnumber
            ]);
            bookaction::create([
                'bookid' => $book->id,
                'action' => "updated the book",
                'performby' => Auth::user()->name
            ]);
            return response()->json([
                'status' => 200,
                'message' => 'Book updated successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => $e->getMessage()
            ]);
        }
    }

    public function get_book($data)
    {
        $book = BookList::join('copies', 'booklists.id', 'copies.bookid')
            ->where('booklists.id', $data)
            ->where('booklists.ishide', false)
            ->orderBy('booklists.id', 'desc')
            ->first();
        return compact('book');
    }

    public function get_bookarchived($id)
    {
        $book = booklist::where('id', $id)->where('ishide', true)->first();
        return compact('book');
    }

    public function get_bookcopies($data)
    {
        $id = booklist::where('accession', $data)->value('id');
        $totalLessen = copies::where('bookid', $id)
            ->where('action', 'lessen')->sum('copies');

        $totalCopies = copies::where('bookid', $id)
            ->where('action', 'added')
            ->sum('copies');

        $totalFine = borrowpage::where('bookid', $id)
            ->where('bookstatus', 'fine')
            ->count();

        $totalOnLend = borrowpage::where('bookid', $id)
            ->where('bookstatus', 'onlend')
            ->count();

        $minus  = $totalOnLend + $totalFine + $totalLessen;
        $total = $totalCopies - $minus;

        if ($total >= 1) {
            $book = BookList::join('copies', 'booklists.id', 'copies.bookid')
                ->where('booklists.id', $id)
                ->where('booklists.ishide', false)
                ->orderBy('booklists.id', 'desc')
                ->first();

            return compact('book');
        } else {
            $message = 'The book is not available.';
            return compact('message');
        }
    }

    public function get_status($bookid, Request $request)
    {
        // $studentno = studentlist::where('studentno', $studentid)->value('id');
        // $id = booklist::where('accession', $data)->value('id');
        // $account = StudentAccount::where('student_number', $studentid)->first();
        // return $bookstatus = borrowpage::join('booklists', 'booklists.id', 'borrowpages.bookid')
        // ->join('copies', 'copies.bookid', 'borrowpages.bookid')
        // ->where('borrowpages.studentid', $account->student->id)
        // ->where('borrowpages.bookid', $id)
        // ->orderBy('borrowpages.id', 'desc')->first();

        $value = [];
        $id = booklist::where('accession', $bookid)->value('id');

        if ($request->data) {
            $word = 'employee';
            if (strpos($request->data, $word) !== false) {
                // Employee

                // $data = explode(":", $request->data);
                // $data = count($data) > 1 ? $data[1] : str_replace($word, '', $request->data);
                // $value = UserStaff::where('email', $data)->first();
                // $value = $value->staff;
                // $designated = $value->job_description;

            } else {
                // Student

                $data = explode(".", $request->data);
                $data = count($data) > 1 ? $data[0] : null;
                $value = StudentAccount::where('student_number', $data)->first();
                return $bookstatus = borrowpage::join('booklists', 'booklists.id', 'borrowpages.bookid')
                ->join('copies', 'copies.bookid', 'borrowpages.bookid')
                ->where('borrowpages.studentid', $value->student_number)
                ->where('borrowpages.bookid', $id)
                ->orderBy('borrowpages.id', 'desc')->first();

                // $value = StudentDetails::find($value->id);
                // $designated = $value->enrollment_assessment ?  
                // $value->enrollment_assessment->year_level() ." ".
                // $value->enrollment_assessment->course->course_code : '';
            }
        }
    }
}
